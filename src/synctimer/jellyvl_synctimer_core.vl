module synctimer_core #(
    parameter TIMER_WIDTH    : u32 = 64                   , // タイマのbit幅
    parameter NUMERATOR      : u32 = 10                   , // クロック周期の分子
    parameter DENOMINATOR    : u32 = 3                    , // クロック周期の分母
    parameter LIMIT_WIDTH    : u32 = TIMER_WIDTH          , // 補正限界のbit幅
    parameter CALC_WIDTH     : u32 = 32                   , // 補正に使う範囲のタイマ幅
    parameter CYCLE_WIDTH    : u32 = 32                   , // 自クロックサイクルカウンタのbit数
    parameter ERROR_WIDTH    : u32 = 32                   , // 誤差計算時のbit幅
    parameter ERROR_Q        : u32 = 8                    , // 誤差計算時に追加する固定小数点数bit数
    parameter ADJUST_WIDTH   : u32 = CYCLE_WIDTH + ERROR_Q, // 補正周期のbit幅
    parameter ADJUST_Q       : u32 = ERROR_Q              , // 補正周期に追加する固定小数点数bit数
    parameter LPF_GAIN_CYCLE : u32 = 6                    , // 自クロックサイクルカウントLPFの更新ゲイン(1/2^N)
    parameter LPF_GAIN_PERIOD: u32 = 6                    , // 周期補正のLPFの更新ゲイン(1/2^N)
    parameter LPF_GAIN_PHASE : u32 = 6                    , // 位相補正のLPFの更新ゲイン(1/2^N)
    parameter DEBUG          : bit = 1'b0                 ,
    parameter SIMULATION     : bit = 1'b0                 ,
) (
    reset: input logic,
    clk  : input logic,

    param_limit_min : input signed logic<LIMIT_WIDTH>,
    param_limit_max : input signed logic<LIMIT_WIDTH>,
    param_adjust_min: input signed logic<ERROR_WIDTH>,
    param_adjust_max: input signed logic<ERROR_WIDTH>,

    set_time : input logic<TIMER_WIDTH>,
    set_valid: input logic             ,

    current_time: output logic<TIMER_WIDTH>,

    correct_time : input logic<TIMER_WIDTH>,
    correct_renew: input logic             ,
    correct_valid: input logic             ,

) {

    // タイマユニット
    var timer_set_time : logic<TIMER_WIDTH>;
    var timer_set_valid: logic             ;
    var adjust_sign    : logic             ;
    var adjust_valid   : logic             ;
    var adjust_ready   : logic             ;

    inst u_synctimer_timer: synctimer_timer #(
        NUMERATOR  : NUMERATOR  ,
        DENOMINATOR: DENOMINATOR,
        TIMER_WIDTH: TIMER_WIDTH,
    ) (
        reset: reset,
        clk  : clk  ,

        set_time : timer_set_time ,
        set_valid: timer_set_valid,

        adjust_sign : adjust_sign ,
        adjust_valid: adjust_valid,
        adjust_ready: adjust_ready,

        current_time: current_time,
    );

    // リミッター
    var limitter_renew: logic;
    inst u_synctimer_limitter: synctimer_limitter #(
        TIMER_WIDTH  : TIMER_WIDTH,
        LIMIT_WIDTH  : LIMIT_WIDTH,
        INIT_OVERRIDE: 1'b1       ,
        DEBUG        : DEBUG      ,
        SIMULATION   : SIMULATION ,
    ) (
        reset: reset,
        clk  : clk  ,

        param_limit_min: param_limit_min,
        param_limit_max: param_limit_max,

        current_time: current_time,

        request_renew: limitter_renew,

        correct_renew: correct_renew,
        correct_time : correct_time ,
        correct_valid: correct_valid,
    );



    // 補正ユニット
    inst u_synctimer_adjuster: synctimer_adjuster #(
        TIMER_WIDTH    : CALC_WIDTH     ,
        CYCLE_WIDTH    : CYCLE_WIDTH    ,
        ERROR_WIDTH    : ERROR_WIDTH    ,
        ERROR_Q        : ERROR_Q        ,
        ADJUST_WIDTH   : ADJUST_WIDTH   ,
        ADJUST_Q       : ADJUST_Q       ,
        LPF_GAIN_CYCLE : LPF_GAIN_CYCLE ,
        LPF_GAIN_PERIOD: LPF_GAIN_PERIOD,
        LPF_GAIN_PHASE : LPF_GAIN_PHASE ,

        DEBUG     : DEBUG     ,
        SIMULATION: SIMULATION,
    ) (
        reset: reset,
        clk  : clk  ,

        current_time: current_time[CALC_WIDTH - 1:0],

        param_adjust_min: param_adjust_min,
        param_adjust_max: param_adjust_max,

        correct_time : correct_time[CALC_WIDTH - 1:0],
        correct_renew: correct_renew | limitter_renew,
        correct_valid: correct_valid                 ,

        adjust_sign : adjust_sign ,
        adjust_valid: adjust_valid,
        adjust_ready: adjust_ready,
    );

    always_comb {
        timer_set_time  = 'x;
        timer_set_valid = 1'b0;

        if set_valid {
            timer_set_time  = set_time;
            timer_set_valid = set_valid;
        } else if limitter_renew || correct_renew {
            timer_set_time  = correct_time;
            timer_set_valid = correct_valid;
        }
    }
}
