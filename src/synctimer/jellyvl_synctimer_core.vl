module synctimer_core #(
    parameter TIMER_WIDTH        : u32 = 64                             , // タイマのbit幅
    parameter NUMERATOR          : u32 = 10                             , // クロック周期の分子
    parameter DENOMINATOR        : u32 = 3                              , // クロック周期の分母
    parameter ADJ_LIMIT_WIDTH    : u32 = TIMER_WIDTH                    , // 補正限界のbit幅
    parameter ADJ_TIMER_WIDTH    : u32 = 32                             , // 補正に使う範囲のタイマ幅
    parameter ADJ_CYCLE_WIDTH    : u32 = 32                             , // 自クロックサイクルカウンタのbit数
    parameter ADJ_ERROR_WIDTH    : u32 = 32                             , // 誤差計算時のbit幅
    parameter ADJ_ERROR_Q        : u32 = 8                              , // 誤差計算時に追加する固定小数点数bit数
    parameter ADJ_ADJUST_WIDTH   : u32 = ADJ_CYCLE_WIDTH + ADJ_ERROR_Q, // 補正周期のbit幅
    parameter ADJ_ADJUST_Q       : u32 = ADJ_ERROR_Q                    , // 補正周期に追加する固定小数点数bit数
    parameter ADJ_LPF_GAIN_CYCLE : u32 = 6                    , // 自クロックサイクルカウントLPFの更新ゲイン(1/2^N)
    parameter ADJ_LPF_GAIN_PERIOD: u32 = 6                              , // 周期補正のLPFの更新ゲイン(1/2^N)
    parameter ADJ_LPF_GAIN_PHASE : u32 = 6                              , // 位相補正のLPFの更新ゲイン(1/2^N)
    parameter DEBUG              : bit = 1'b0                           ,
    parameter SIMULATION         : bit = 1'b0                           ,
) (
    reset: input logic,
    clk  : input logic,

    adj_param_limit_min : input signed logic<ADJ_LIMIT_WIDTH> ,
    adj_param_limit_max : input signed logic<ADJ_LIMIT_WIDTH> ,
    adj_param_adjust_min: input signed logic<ADJ_ERROR_WIDTH>,
    adj_param_adjust_max: input signed logic<ADJ_ERROR_WIDTH>,

    set_time : input logic<TIMER_WIDTH>,
    set_valid: input logic             ,

    current_time: output logic<TIMER_WIDTH>,

    correct_override: input logic             ,
    correct_time    : input logic<TIMER_WIDTH>,
    correct_valid   : input logic             ,

) {

    // タイマユニット
    var timer_set_time : logic<TIMER_WIDTH>;
    var timer_set_valid: logic             ;
    var adjust_sign    : logic             ;
    var adjust_valid   : logic             ;
    var adjust_ready   : logic             ;

    inst u_synctimer_timer: synctimer_timer #(
        NUMERATOR  : NUMERATOR  ,
        DENOMINATOR: DENOMINATOR,
        TIMER_WIDTH: TIMER_WIDTH,
    ) (
        reset: reset,
        clk  : clk  ,

        set_time : timer_set_time ,
        set_valid: timer_set_valid,

        adjust_sign : adjust_sign ,
        adjust_valid: adjust_valid,
        adjust_ready: adjust_ready,

        current_time: current_time,
    );


    // リミッター
    var override_request: logic;
    inst u_synctimer_limitter: synctimer_limitter #(
        TIMER_WIDTH  : TIMER_WIDTH    ,
        LIMIT_WIDTH  : ADJ_LIMIT_WIDTH,
        INIT_OVERRIDE: 1'b1           ,
        DEBUG        : DEBUG          ,
        SIMULATION   : SIMULATION     ,
    ) (
        reset: reset,
        clk  : clk  ,

        param_limit_min: adj_param_limit_min,
        param_limit_max: adj_param_limit_max,

        current_time: current_time,

        override_request: override_request,

        correct_override: correct_override,
        correct_time    : correct_time    ,
        correct_valid   : correct_valid   ,
    );



    // 補正ユニット
    inst u_synctimer_adjust: synctimer_adjust #(
        TIMER_WIDTH    : ADJ_TIMER_WIDTH,
        CYCLE_WIDTH    : ADJ_CYCLE_WIDTH    ,  
        ERROR_WIDTH    : ADJ_ERROR_WIDTH    ,  
        ERROR_Q        : ADJ_ERROR_Q        ,  
        ADJUST_WIDTH   : ADJ_ADJUST_WIDTH   ,  
        ADJUST_Q       : ADJ_ADJUST_Q       ,  
        LPF_GAIN_CYCLE : ADJ_LPF_GAIN_CYCLE ,  
        LPF_GAIN_PERIOD: ADJ_LPF_GAIN_PERIOD,  
        LPF_GAIN_PHASE : ADJ_LPF_GAIN_PHASE ,  

        DEBUG     : DEBUG     ,
        SIMULATION: SIMULATION,
    ) (
        reset: reset,
        clk  : clk  ,

        current_time: current_time[ADJ_TIMER_WIDTH-1:0],

        param_adjust_min: adj_param_adjust_min,
        param_adjust_max: adj_param_adjust_max,

        correct_override: correct_override | override_request,
        correct_time    : correct_time[ADJ_TIMER_WIDTH-1:0]                       ,
        correct_valid   : correct_valid                      ,

        adjust_sign : adjust_sign ,
        adjust_valid: adjust_valid,
        adjust_ready: adjust_ready,
    );

    always_comb {
        timer_set_time  = 'x;
        timer_set_valid = 1'b0;

        if set_valid {
            timer_set_time  = set_time;
            timer_set_valid = set_valid;
        } else if override_request || correct_override {
            timer_set_time  = correct_time;
            timer_set_valid = correct_valid;
        }
    }
}
