module synctimer_core #(
    parameter TIMER_WIDTH        : u32 = 64                             , // タイマのbit幅
    parameter NUMERATOR          : u32 = 10                             , // クロック周期の分子
    parameter DENOMINATOR        : u32 = 3                              , // クロック周期の分母
    parameter ADJ_LIMIT_WIDTH    : u32 = TIMER_WIDTH                    , // 補正限界のbit幅
    parameter ADJ_COUNTER_WIDTH  : u32 = 32                             , // 自クロックで経過時間カウンタのbit数
    parameter ADJ_CALC_WIDTH     : u32 = 32                             , // タイマのうち計算に使う部分
    parameter ADJ_ERROR_WIDTH    : u32 = 32                             , // 誤差計算時のbit幅
    parameter ADJ_ERROR_Q        : u32 = 8                              , // 誤差計算時に追加する固定小数点数bit数
    parameter ADJ_ADJUST_WIDTH   : u32 = ADJ_COUNTER_WIDTH + ADJ_ERROR_Q, // 補正周期のbit幅
    parameter ADJ_ADJUST_Q       : u32 = ADJ_ERROR_Q                    , // 補正周期に追加する固定小数点数bit数
    parameter ADJ_PERIOD_WIDTH   : u32 = ADJ_ERROR_WIDTH                , // 周期補正に使うbit数
    parameter ADJ_PHASE_WIDTH    : u32 = ADJ_ERROR_WIDTH                , // 位相補正に使うbit数
    parameter ADJ_PERIOD_LPF_GAIN: u32 = 4                              , // 周期補正のLPFの更新ゲイン(1/2^N)
    parameter ADJ_PHASE_LPF_GAIN : u32 = 4                              , // 位相補正のLPFの更新ゲイン(1/2^N)
    parameter DEBUG              : bit = 1'b0                           ,
    parameter SIMULATION         : bit = 1'b0                           ,
) (
    reset: input logic,
    clk  : input logic,

    adj_param_limit_min : input signed logic<ADJ_LIMIT_WIDTH> ,
    adj_param_limit_max : input signed logic<ADJ_LIMIT_WIDTH> ,
    adj_param_phase_min : input signed logic<ADJ_PHASE_WIDTH> ,
    adj_param_phase_max : input signed logic<ADJ_PHASE_WIDTH> ,
    adj_param_period_min: input signed logic<ADJ_PERIOD_WIDTH>,
    adj_param_period_max: input signed logic<ADJ_PERIOD_WIDTH>,

    set_time : input logic<TIMER_WIDTH>,
    set_valid: input logic             ,

    current_time: output logic<TIMER_WIDTH>,

    correct_override: input logic             ,
    correct_time    : input logic<TIMER_WIDTH>,
    correct_valid   : input logic             ,

) {

    // 補正ユニット
    var override_request: logic;
    assign override_request = 1'b0;

    var adjust_sign : logic;
    var adjust_valid: logic;
    var adjust_ready: logic;

    inst u_synctimer_adjust: synctimer_adjust #(
        TIMER_WIDTH: TIMER_WIDTH,
        //        LIMIT_WIDTH    : ADJ_LIMIT_WIDTH    ,
        //        COUNTER_WIDTH  : ADJ_COUNTER_WIDTH  ,
        //        CALC_WIDTH     : ADJ_CALC_WIDTH     ,
        //        ERROR_WIDTH    : ADJ_ERROR_WIDTH    ,
        //        ERROR_Q        : ADJ_ERROR_Q        ,
        //        ADJUST_WIDTH   : ADJ_ADJUST_WIDTH   ,
        //        ADJUST_Q       : ADJ_ADJUST_Q       ,
        //        PERIOD_WIDTH   : ADJ_PERIOD_WIDTH   ,
        //        PHASE_WIDTH    : ADJ_PHASE_WIDTH    ,
        //        PERIOD_LPF_GAIN: ADJ_PERIOD_LPF_GAIN,
        //        PHASE_LPF_GAIN : ADJ_PHASE_LPF_GAIN ,
        DEBUG     : DEBUG     ,
        SIMULATION: SIMULATION,
    ) (
        reset: reset,
        clk  : clk  ,

        current_time: current_time,

        //        param_cycle_min :  -32'd100,
        //       param_cycle_max :  +32'd100,
        param_adjust_min: -32'd100,
        param_adjust_max: +32'd100,

        correct_override: correct_override,
        correct_time    : correct_time    ,
        correct_valid   : correct_valid   ,

        adjust_sign : adjust_sign ,
        adjust_valid: adjust_valid,
        adjust_ready: adjust_ready,
    );


    // タイマユニット
    var timer_set_time : logic<TIMER_WIDTH>;
    var timer_set_valid: logic             ;

    inst u_synctimer_timer: synctimer_timer #(
        NUMERATOR  : NUMERATOR  ,
        DENOMINATOR: DENOMINATOR,
        TIMER_WIDTH: TIMER_WIDTH,
    ) (
        reset: reset,
        clk  : clk  ,

        set_time : timer_set_time ,
        set_valid: timer_set_valid,

        adjust_sign : adjust_sign ,
        adjust_valid: adjust_valid,
        adjust_ready: adjust_ready,

        current_time: current_time,
    );

    always_comb {
        timer_set_time  = 'x;
        timer_set_valid = 1'b0;

        if set_valid {
            timer_set_time  = set_time;
            timer_set_valid = set_valid;
        } else if override_request || correct_override {
            timer_set_time  = correct_time;
            timer_set_valid = correct_valid;
        }
    }
}
