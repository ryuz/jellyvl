
// 調整パルスドライブ
module synctimer_adjuster_driver #(
    param CYCLE_WIDTH : u32 = 32                   , // 自クロックサイクルカウンタのbit数
    param CYCLE_Q     : u32 = 8                    , // 自クロックサイクルカウンタに追加する固定小数点数bit数
    param ERROR_WIDTH : u32 = 32                   , // 誤差計算時のbit幅
    param ERROR_Q     : u32 = 8                    , // 誤差計算時に追加する固定小数点数bit数
    param ADJUST_WIDTH: u32 = CYCLE_WIDTH + ERROR_Q, // 補正周期のbit幅
    param ADJUST_Q    : u32 = ERROR_Q              , // 補正周期に追加する固定小数点数bit数
    param DEBUG       : bit = 1'b0                 ,
    param SIMULATION  : bit = 1'b0                 ,
) (
    reset: input logic,
    clk  : input logic,

    request_value: input signed logic<ERROR_WIDTH + ERROR_Q>,
    request_cycle: input logic       <CYCLE_WIDTH + CYCLE_Q>,
    request_valid: input logic                              ,

    adjust_sign : output logic,
    adjust_valid: output logic,
    adjust_ready: input  logic,
) {


    // type
    local t_error  : type = signed logic<ERROR_WIDTH + ERROR_Q>;
    local t_error_u: type = logic<ERROR_WIDTH + ERROR_Q>;
    local t_count  : type = logic<CYCLE_WIDTH>;
    local t_cycle  : type = logic<CYCLE_WIDTH + CYCLE_Q>;
    local t_adjust : type = logic<ADJUST_WIDTH + ADJUST_Q>;


    // -------------------------------------
    //  調整信号の間隔計算
    // -------------------------------------

    var div_calc_sign  : logic    ;
    var div_calc_zero  : logic    ;
    var div_calc_error : t_error_u;
    var div_calc_cycle : t_cycle  ;
    var div_calc_enable: logic    ;
    var div_calc_valid : logic    ;

    always_ff (clk, reset) {
        if_reset {
            div_calc_sign   = 'x;
            div_calc_zero   = 'x;
            div_calc_error  = 'x;
            div_calc_cycle  = 'x;
            div_calc_enable = 1'b0;
            div_calc_valid  = 1'b0;
        } else {
            if request_valid {
                div_calc_sign  = request_value <: 0;
                div_calc_zero  = request_value == 0;
                div_calc_error = if request_value <: 0 {
                    (-request_value) as t_error_u
                } else {
                    request_value as t_error_u
                };
                div_calc_cycle  = request_cycle;
                div_calc_enable = 1'b1;
            }
            div_calc_valid = request_valid;
        }
    }


    // divider
    local t_cycle_q: type = logic<CYCLE_WIDTH + ERROR_Q + ADJUST_Q>;

    function CycleToError (
        cycle: input t_cycle  ,
    ) -> t_cycle_q {
        if ERROR_Q + ADJUST_Q >: CYCLE_Q {
            return cycle as t_cycle_q << (ERROR_Q + ADJUST_Q - CYCLE_Q);
        } else {
            return cycle as t_cycle_q >> (CYCLE_Q - ERROR_Q - ADJUST_Q);
        }
    }

    var div_quotient : t_adjust;
    var div_remainder: t_error ;
    var div_valid    : logic   ;

    var tmp_ready: logic;
    inst i_divider_unsigned_multicycle: divider_unsigned_multicycle #(
        DIVIDEND_WIDTH: CYCLE_WIDTH + ERROR_Q + ADJUST_Q,
        DIVISOR_WIDTH : ERROR_WIDTH + ERROR_Q           ,
        QUOTIENT_WIDTH: ADJUST_WIDTH + ADJUST_Q         ,
    ) (
        reset: reset,
        clk  : clk  ,
        cke  : 1'b1 ,

        s_dividend: CycleToError(div_calc_cycle),
        s_divisor : div_calc_error              ,
        s_valid   : div_calc_valid              ,
        s_ready   : tmp_ready                   ,

        m_quotient : div_quotient ,
        m_remainder: div_remainder,
        m_valid    : div_valid    ,
        m_ready    : 1'b1         ,
    );


    // adjust parameter
    local ADJ_STEP: t_adjust = (1 << ADJUST_Q) as t_adjust;

    var adj_param_zero  : logic   ;
    var adj_param_sign  : logic   ;
    var adj_param_period: t_adjust;
    var adj_param_valid : logic   ;
    var adj_param_ready : logic   ;

    always_ff (clk, reset) {
        if_reset {
            adj_param_zero   = 1'b1;
            adj_param_sign   = 1'bx;
            adj_param_period = 'x;
            adj_param_valid  = 1'b0;
        } else {
            if adj_param_ready {
                adj_param_valid = 1'b0;
            }

            if div_valid {
                if div_calc_zero {
                    adj_param_zero   = 1'b1;
                    adj_param_sign   = 1'b0;
                    adj_param_period = '0;
                    adj_param_valid  = !adj_param_zero; // 変化があれば発行
                } else {
                    adj_param_zero   = div_calc_zero;
                    adj_param_sign   = div_calc_sign;
                    adj_param_period = div_quotient - ADJ_STEP;
                    adj_param_valid  = adj_param_zero || ((div_quotient - ADJ_STEP) != adj_param_period);
                }
            }
        }
    }

    // adjuster
    var adj_calc_zero  : logic   ;
    var adj_calc_sign  : logic   ;
    var adj_calc_period: t_adjust;
    var adj_calc_count : t_adjust;
    var adj_calc_next  : t_adjust;
    var adj_calc_valid : logic   ;

    always_ff (clk, reset) {
        if_reset {
            adj_calc_zero   = 1'b1;
            adj_calc_sign   = 'x;
            adj_calc_period = '0;
            adj_calc_count  = 'x;
            adj_calc_next   = 'x;
            adj_calc_valid  = 1'b0;
        } else {

            // adj_param_valid は連続で来ない、period は2以上の前提で事前計算
            adj_calc_count += (1 << ADJUST_Q) as t_adjust;
            adj_calc_next  =  adj_calc_count - adj_calc_period;
            adj_calc_valid =  adj_calc_count >= adj_calc_period || adj_calc_zero;

            if adj_calc_valid {
                adj_calc_count = adj_calc_next;
                adj_calc_valid = 1'b0;
            }

            if adj_param_valid {
                adj_calc_zero   = adj_param_zero;
                adj_calc_sign   = adj_param_sign;
                adj_calc_period = adj_param_period;
                adj_calc_count  = '0;
                adj_calc_valid  = 1'b0;
            }
        }
    }

    assign adj_param_ready = 1'b1; // adj_calc_valid;


    // output
    always_ff (clk, reset) {
        if_reset {
            adjust_sign  = 'x;
            adjust_valid = 1'b0;
        } else {
            if adjust_ready {
                adjust_valid = 1'b0;
            }

            if adj_calc_valid {
                adjust_sign  = adj_calc_sign;
                adjust_valid = ~adj_calc_zero;
            }
        }
    }

    if DEBUG :debug_monitor {
        #[sv("mark_debug=\"true\"")]
        var dbg_counter: logic<32>;

        #[sv("mark_debug=\"true\"")]
        var dbg_adj_sum: signed logic<16>;

        #[sv("mark_debug=\"true\"")]
        var dbg_adjust_sign: logic;
        #[sv("mark_debug=\"true\"")]
        var dbg_adjust_valid: logic;
        #[sv("mark_debug=\"true\"")]
        var dbg_adjust_ready: logic;

        always_ff (clk) {
            dbg_counter = dbg_counter + 1;

            if request_valid {
                dbg_adj_sum = '0;
            } else {
                if adjust_valid {
                    if adjust_sign {
                        dbg_adj_sum -= 16'd1;
                    } else {
                        dbg_adj_sum += 16'd1;
                    }
                }
            }

            dbg_adjust_sign  = adjust_sign;
            dbg_adjust_valid = adjust_valid;
            dbg_adjust_ready = adjust_ready;
        }
    }

    if SIMULATION :sim_monitor {
        var sim_monitor_request_value: f64;
        var sim_monitor_request_cycle: f64;

        assign sim_monitor_request_value = $itor(request_value) / $itor(2 ** ERROR_Q);
        assign sim_monitor_request_cycle = $itor(request_cycle) / $itor(2 ** CYCLE_Q);
    }
}
