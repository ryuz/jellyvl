module periodic_trigger #(
    parameter TIMER_WIDTH   : u32 = 64  ,
    parameter PERIOD_WIDTH  : u32 = 32  ,
    parameter THRASHING_MASK: bit = 1'b1,
) (
    reset: input logic,
    clk  : input logic,

    enable: input logic              ,
    phase : input logic<PERIOD_WIDTH>,
    period: input logic<PERIOD_WIDTH>,

    current_time: input logic<TIMER_WIDTH>,

    trigger: output logic,
) {

    localparam t_period: type = logic<PERIOD_WIDTH>;

    var trigger_valid: logic   ;
    var base_time    : t_period;

    var elapsed_time: t_period;
    assign elapsed_time = current_time[PERIOD_WIDTH - 1:0] - base_time;

    always_ff (clk, reset) {
        if_reset {
            base_time     = '0;
            trigger       = 1'b0;
            trigger_valid = 1'b0;
        } else {
            if enable {
                trigger       = 1'b0;
                trigger_valid = 1'b0;
                if elapsed_time >= period {
                    base_time = base_time + period;

                    trigger_valid = 1'b1;
                    trigger       = !THRASHING_MASK || !trigger_valid; // 連続していなければ発行
                }
            } else {
                base_time     = phase;
                trigger_valid = 1'b0;
                trigger       = 1'b0;
            }
        }
    }
}
