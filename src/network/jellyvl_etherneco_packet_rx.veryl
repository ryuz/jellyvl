module etherneco_packet_rx #(
    parameter DOWN_STREAM  : bit = 1'b0,
    parameter REPLACE_DELAY: u32 = 0   ,
    parameter BUFFERING    : u32 = 1   ,
    parameter M_REGS       : bit = 1'b1,
) (
    reset: input logic,
    clk  : input logic,

    s_rx_first: input logic   ,
    s_rx_last : input logic   ,
    s_rx_data : input logic<8>,
    s_rx_valid: input logic   ,

    m_tx_first: output logic   ,
    m_tx_last : output logic   ,
    m_tx_data : output logic<8>,
    m_tx_valid: output logic   ,

    rx_start: output logic,
    rx_end  : output logic,
    rx_error: output logic,

    rx_length: output logic<16>,
    rx_type  : output logic<8> ,
    rx_node  : output logic<8> ,

    payload_first: output logic    ,
    payload_last : output logic    ,
    payload_pos  : output logic<16>,
    payload_data : output logic<8> ,
    payload_valid: output logic    ,

    replace_data : input logic<8>,
    replace_valid: input logic   ,
) {

    localparam BIT_PREAMBLE: u32 = 0;
    localparam BIT_LENGTH  : u32 = 1;
    localparam BIT_TYPE    : u32 = 2;
    localparam BIT_NODE    : u32 = 3;
    localparam BIT_PAYLOAD : u32 = 4;
    localparam BIT_FCS     : u32 = 5;
    localparam BIT_ERROR   : u32 = 6;

    localparam t_state_bit: type = logic<7>;

    enum STATE: logic<7> {
        IDLE = 7'b0000000,
        PREAMBLE = 7'b0000001,
        LENGTH = 7'b0000010,
        TYPE = 7'b0000100,
        NODE = 7'b0001000,
        PAYLOAD = 7'b0010000,
        FCS = 7'b0100000,
        ERROR = 7'b1000000,
    }

    localparam t_count : type = logic<4>;
    localparam t_length: type = logic<16>;

    var state    : STATE      ;
    var state_bit: t_state_bit;
    assign state_bit = state as t_state_bit;

    var count      : t_count    ;
    var preamble   : logic      ;
    var fcs_rx_last: logic      ;
    var crc_update : logic      ;
    var crc_check  : logic      ;
    var crc_value  : logic  <32>;

    var fw_count     : logic<2>;
    var fw_crc_update: logic   ;
    var fw_fcs       : logic   ;
    var fw_first     : logic   ;
    var fw_last      : logic   ;
    var fw_data      : logic<8>;
    var fw_valid     : logic   ;

    var payload_pos_next: t_length;
    assign payload_pos_next = payload_pos + 1 as t_length;

    always_ff (clk, reset) {
        if_reset {
            state         = STATE::IDLE;
            count         = 'x;
            preamble      = 1'b0;
            payload_first = 'x;
            payload_last  = 'x;
            payload_pos   = 'x;
            fcs_rx_last   = 'x;
            crc_update    = 'x;
            crc_check     = 1'b0;

            rx_start  = 1'b0;
            rx_end    = 1'b0;
            rx_error  = 1'b0;
            rx_length = 'x;
            rx_type   = 'x;
            rx_node   = 'x;

            fw_count      = 'x;
            fw_crc_update = 'x;
            fw_fcs        = 'x;
            fw_first      = 'x;
            fw_last       = 'x;
            fw_data       = 'x;
            fw_valid      = 1'b0;
        } else {
            rx_start  = 1'b0;
            rx_end    = 1'b0;
            rx_error  = 1'b0;
            crc_check = 1'b0;

            fw_count      = 'x;
            fw_crc_update = 'x;
            fw_fcs        = 'x;
            fw_first      = 1'bx;
            fw_last       = 1'bx;
            fw_data       = 'x;
            fw_valid      = 1'b0;

            if s_rx_valid {
                fw_count      = count[1:0];
                fw_crc_update = crc_update;
                fw_fcs        = (state == STATE::FCS);
                fw_first      = s_rx_first;
                fw_last       = s_rx_last;
                fw_data       = s_rx_data;
                fw_valid      = s_rx_valid;

                if count != '1 {
                    count = count + 1'b1;
                }

                payload_first = 1'b0;
                payload_last  = 1'b0;
                fcs_rx_last   = 1'b0;

                case state {
                    STATE::IDLE: {
                        if s_rx_first {
                            if s_rx_data == 8'h55 && !s_rx_last {
                                state    = STATE::PREAMBLE;
                                rx_start = 1'b1;
                                count    = '0;
                            } else {
                                // 送信開始前なので何も中継せずに止める
                                state    = STATE::ERROR;
                                rx_error = 1'b1;
                                count    = 'x;
                                fw_first = 'x;
                                fw_last  = 'x;
                                fw_data  = 'x;
                                fw_valid = 1'b0;
                            }
                            crc_update = 'x;
                        }
                    }

                    STATE::PREAMBLE: {
                        if count == 6 as t_count {
                            state      = STATE::LENGTH;
                            count      = '0;
                            crc_update = 1'b0;
                        }
                    }

                    STATE::LENGTH: {
                        if count[0:0] == 1'b1 {
                            rx_length[15:8] = s_rx_data;
                            crc_update      = 1'b1;
                            state           = STATE::TYPE;
                            count           = 'x;
                        } else {
                            rx_length[7:0] = s_rx_data;
                            crc_update     = 1'b1;
                        }
                    }

                    STATE::TYPE: {
                        rx_type = s_rx_data;
                        state   = STATE::NODE;
                        count   = 'x;
                    }

                    STATE::NODE: {
                        rx_node       = s_rx_data;
                        state         = STATE::PAYLOAD;
                        payload_first = 1'b1;
                        payload_last  = (rx_length == '0);
                        payload_pos   = '0;
                        if DOWN_STREAM {
                            fw_data = s_rx_data - 8'd1;
                        } else {
                            fw_data = s_rx_data + 8'd1;
                        }
                    }

                    STATE::PAYLOAD: {
                        payload_first = 1'b0;
                        payload_last  = (payload_pos_next == rx_length);
                        payload_pos   = payload_pos_next;
                        if payload_last {
                            state       = STATE::FCS;
                            fcs_rx_last = 1'b0;
                            count       = '0;
                            rx_length   = 'x;
                        }
                    }

                    STATE::FCS: {
                        fcs_rx_last = (count[1:0] == 2'd2);
                        if fcs_rx_last {
                            state     = STATE::IDLE;
                            crc_check = 1'b1;
                        }
                    }

                    default: {
                        state = STATE::IDLE;
                    }
                }

                // 不正状態検知
                if (s_rx_first && state != STATE::IDLE && state != STATE::ERROR) || (s_rx_last && !s_rx_first && !fcs_rx_last) || (state == STATE::PREAMBLE && !((count == 4'd6 && s_rx_data == 8'hd5) || (count != 4'd6 && s_rx_data == 8'h55))) {
                    // パケットを打ち切る
                    state    = STATE::ERROR;
                    rx_error = 1'b1;
                    fw_first = 1'b0;
                    fw_last  = 1'b1;
                    fw_data  = '0;
                    fw_valid = 1'b1;
                }
            }

            // エラー処理
            if state == STATE::ERROR {
                state     = STATE::IDLE;
                rx_type   = 'x;
                rx_node   = 'x;
                rx_length = 'x;
                fw_first  = 'x;
                fw_last   = 'x;
                fw_data   = 'x;
                fw_valid  = 1'b0;
            }

            // CRC チェック
            if crc_check {
                if crc_value == 32'h2144df1c {
                    rx_end = 1'b1;
                } else {
                    rx_error = 1'b1;
                }
            }
        }
    }

    assign payload_data  = s_rx_data;
    assign payload_valid = s_rx_valid & state_bit[BIT_PAYLOAD];

    inst u_cacl_crc_rx: jelly2_calc_crc #(
        DATA_WIDTH: 8           ,
        CRC_WIDTH : 32          ,
        POLY_REPS : 32'h04C11DB7,
        REVERSED  : 0           ,
    ) (
        reset: reset,
        clk  : clk  ,
        cke  : 1'b1 ,

        in_update: crc_update,
        in_data  : s_rx_data ,
        in_valid : s_rx_valid,

        out_crc: crc_value,
    );



    // -----------------------------
    //  Forward
    // -----------------------------

    var fw_ready: logic;

    var dly_count     : logic<2>;
    var dly_crc_update: logic   ;
    var dly_fcs       : logic   ;
    var dly_first     : logic   ;
    var dly_last      : logic   ;
    var dly_data_tmp  : logic<8>;
    var dly_data      : logic<8>;
    var dly_valid     : logic   ;

    localparam t_delay: type = logic<2 + 4 + 8>;

    inst u_data_delay: data_delay #(
        t_data   : t_delay      ,
        LATENCY  : REPLACE_DELAY,
        INIT_DATA: 'x           ,
    ) (
        reset: reset,
        clk  : clk  ,
        cke  : 1'b1 ,

        s_data : {fw_count, fw_crc_update, fw_fcs, fw_first, fw_last, fw_data},
        s_valid: fw_valid                                                ,
        s_ready: fw_ready                                                ,

        m_data : {dly_count, dly_crc_update, dly_fcs, dly_first, dly_last, dly_data_tmp},
        m_valid: dly_valid                                                         ,
        m_ready: 1'b1                                                              ,
    );


    // replace & CRC
    assign dly_data = if replace_valid {
        replace_data
    } else {
        dly_data_tmp
    };

    var tx_crc_value: logic<4, 8>;
    inst u_cacl_crc_tx: jelly2_calc_crc #(
        DATA_WIDTH: 8           ,
        CRC_WIDTH : 32          ,
        POLY_REPS : 32'h04C11DB7,
        REVERSED  : 0           ,
    ) (
        reset: reset,
        clk  : clk  ,
        cke  : 1'b1 ,

        in_update: dly_crc_update      ,
        in_data  : dly_data            ,
        in_valid : dly_valid & !dly_fcs,

        out_crc: tx_crc_value,
    );


    // output
    var tx_count: logic<2>;
    var tx_fcs  : logic   ;
    var tx_first: logic   ;
    var tx_last : logic   ;
    var tx_buf  : logic<8>;
    var tx_data : logic<8>;
    var tx_valid: logic   ;
    var tx_ready: logic   ;

    always_ff (clk, reset) {
        if_reset {
            tx_count = 'x;
            tx_fcs   = 'x;
            tx_first = 'x;
            tx_last  = 'x;
            tx_buf   = 'x;
            tx_valid = 1'b0;
        } else {
            tx_count = dly_count;
            tx_fcs   = dly_fcs;
            tx_first = dly_first;
            tx_last  = dly_last;
            tx_buf   = dly_data;
            tx_valid = dly_valid;
        }
    }

    always_comb {
        tx_data = tx_buf;
        if tx_fcs {
            tx_data = tx_crc_value[tx_count];
        }
    }



    // 1サイクル分貯める
    localparam t_buf: type = logic<2 + 8>;

    var buf_first: logic   ;
    var buf_last : logic   ;
    var buf_data : logic<8>;
    var buf_valid: logic   ;
    var buf_ready: logic   ;

    inst u_stream_ff: stream_ff #(
        t_data   : t_buf         ,
        S_REGS   : BUFFERING >: 0,
        M_REGS   : M_REGS        ,
        INIT_DATA: 'x            ,
    ) (
        reset: reset,
        clk  : clk  ,
        cke  : 1'b1 ,

        s_data : {tx_first, tx_last, tx_data},
        s_valid: tx_valid                  ,
        s_ready: tx_ready                  ,

        m_data : {buf_first, buf_last, buf_data},
        m_valid: buf_valid                    ,
        m_ready: buf_ready                    ,
    );

    // 1サイクル溜める
    var buf_enable: logic;
    always_ff (clk, reset) {
        if_reset {
            buf_enable = 1'b0;
        } else {
            if buf_valid {
                buf_enable = 1'b1;
            }
            if buf_valid && buf_ready && buf_last {
                buf_enable = 1'b0;
            }
        }
    }

    assign buf_ready = buf_enable;

    assign m_tx_first = buf_first;
    assign m_tx_last  = buf_last;
    assign m_tx_data  = buf_data;
    assign m_tx_valid = buf_valid & buf_enable;

}
