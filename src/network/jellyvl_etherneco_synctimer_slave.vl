module etherneco_synctimer_slave #(
    parameter TIMER_WIDTH        : u32 = 64                           , // タイマのbit幅
    parameter NUMERATOR          : u32 = 10                           , // クロック周期の分子
    parameter DENOMINATOR        : u32 = 3                            , // クロック周期の分母
    parameter ADJ_LIMIT_WIDTH    : u32 = TIMER_WIDTH                  , // 補正限界のbit幅
    parameter ADJ_TIMER_WIDTH    : u32 = 32                           , // 補正に使う範囲のタイマ幅
    parameter ADJ_CYCLE_WIDTH    : u32 = 32                           , // 自クロックサイクルカウンタのbit数
    parameter ADJ_ERROR_WIDTH    : u32 = 32                           , // 誤差計算時のbit幅
    parameter ADJ_ERROR_Q        : u32 = 8                            , // 誤差計算時に追加する固定小数点数bit数
    parameter ADJ_ADJUST_WIDTH   : u32 = ADJ_CYCLE_WIDTH + ADJ_ERROR_Q, // 補正周期のbit幅
    parameter ADJ_ADJUST_Q       : u32 = ADJ_ERROR_Q                  , // 補正周期に追加する固定小数点数bit数
    parameter ADJ_LPF_GAIN_CYCLE : u32 = 6                            , // 自クロックサイクルカウントLPFの更新ゲイン(1/2^N)
    parameter ADJ_LPF_GAIN_PERIOD: u32 = 6                            , // 周期補正のLPFの更新ゲイン(1/2^N)
    parameter ADJ_LPF_GAIN_PHASE : u32 = 6                            , // 位相補正のLPFの更新ゲイン(1/2^N)
    parameter DEBUG              : bit = 1'b0                         ,
    parameter SIMULATION         : bit = 1'b0                         ,
) (
    reset: input logic,
    clk  : input logic,

    adj_enable: input logic,

    current_time: output logic<TIMER_WIDTH>,

    // command
    cmd_rx_start : input logic    ,
    cmd_rx_end   : input logic    ,
    cmd_rx_error : input logic    ,
    cmd_rx_length: input logic<16>,
    cmd_rx_type  : input logic<8> ,
    cmd_rx_node  : input logic<8> ,

    s_cmd_first: input  logic    ,
    s_cmd_last : input  logic    ,
    s_cmd_pos  : input  logic<16>,
    s_cmd_data : input  logic<8> ,
    s_cmd_valid: input  logic    ,
    m_cmd_data : output logic<8> ,
    m_cmd_valid: output logic    ,

    // downstream
    res_rx_start : input logic    ,
    res_rx_end   : input logic    ,
    res_rx_error : input logic    ,
    res_rx_length: input logic<16>,
    res_rx_type  : input logic<8> ,
    res_rx_node  : input logic<8> ,

    s_res_first: input  logic    ,
    s_res_last : input  logic    ,
    s_res_pos  : input  logic<16>,
    s_res_data : input  logic<8> ,
    s_res_valid: input  logic    ,
    m_res_data : output logic<8> ,
    m_res_valid: output logic    ,
) {

    // ---------------------------------
    //  Timer
    // ---------------------------------

    localparam t_time     : type = logic<8, 8>;
    localparam t_adj_limit: type = logic<ADJ_LIMIT_WIDTH>;
    localparam t_adj_error: type = logic<ADJ_ERROR_WIDTH>;

    #[sv("mark_debug=\"true\"")]
    var correct_override: logic;
    #[sv("mark_debug=\"true\"")]
    var correct_time: logic<TIMER_WIDTH>;
    #[sv("mark_debug=\"true\"")]
    var correct_valid: logic;

    #[sv("mark_debug=\"true\"")]
    var dbg_current_time: logic<TIMER_WIDTH>;
    assign dbg_current_time = current_time;

    inst u_synctimer_core: synctimer_core #(
        TIMER_WIDTH        : TIMER_WIDTH        ,
        NUMERATOR          : NUMERATOR          ,
        DENOMINATOR        : DENOMINATOR        ,
        ADJ_LIMIT_WIDTH    : ADJ_LIMIT_WIDTH    ,
        ADJ_TIMER_WIDTH    : ADJ_TIMER_WIDTH    ,
        ADJ_CYCLE_WIDTH    : ADJ_CYCLE_WIDTH    ,
        ADJ_ERROR_WIDTH    : ADJ_ERROR_WIDTH    ,
        ADJ_ERROR_Q        : ADJ_ERROR_Q        ,
        ADJ_ADJUST_WIDTH   : ADJ_ADJUST_WIDTH   ,
        ADJ_ADJUST_Q       : ADJ_ADJUST_Q       ,
        ADJ_LPF_GAIN_CYCLE : ADJ_LPF_GAIN_CYCLE ,
        ADJ_LPF_GAIN_PERIOD: ADJ_LPF_GAIN_PERIOD,
        ADJ_LPF_GAIN_PHASE : ADJ_LPF_GAIN_PHASE ,
        DEBUG              : DEBUG              ,
        SIMULATION         : SIMULATION         ,
    ) (
        reset: reset,
        clk  : clk  ,

        adj_param_limit_min : -100000 as t_adj_limit,
        adj_param_limit_max : +100000 as t_adj_limit,
        adj_param_adjust_min: -1000 as t_adj_error  ,
        adj_param_adjust_max: +1000 as t_adj_error  ,

        set_time : '0  ,
        set_valid: 1'b0,

        current_time: current_time,

        correct_override: correct_override          ,
        correct_time    : correct_time              ,
        correct_valid   : correct_valid & adj_enable,
    );


    // フリーランタイマ
    var free_run_time : logic<ADJ_TIMER_WIDTH>;
    var tmp_adjust_ready : logic;
    inst u_synctimer_timer_free_run: synctimer_timer #(
        NUMERATOR  : NUMERATOR  ,
        DENOMINATOR: DENOMINATOR,
        TIMER_WIDTH: ADJ_TIMER_WIDTH,
    ) (
        reset: reset,
        clk  : clk  ,

        set_time : '0,
        set_valid: 1'b0,

        adjust_sign : '0,
        adjust_valid: '0,
        adjust_ready: tmp_adjust_ready,

        current_time: free_run_time,
    );


    // 応答時間補正
    localparam t_offset    : type     = logic<4, 8>;
    var start_time  : t_offset;
    var elapsed_time: t_offset;

    always_ff (clk) {
        if cmd_rx_start {
            start_time = free_run_time as t_offset;
        }

        if res_rx_start {
            elapsed_time = free_run_time as t_offset - start_time;
        }
    }


    // ---------------------------------
    //  Upstream (receive request)
    // ---------------------------------

    localparam t_position: type = logic<16>;

    var up_reset: logic;
    assign up_reset = reset || cmd_rx_error;

    var cmd_rx_cmd       : logic     <8>;
    var cmd_rx_time      : t_time       ;
    var cmd_rx_time_bit  : logic     <8>;
    var cmd_rx_offset    : t_offset     ;
    var cmd_rx_offset_pos: t_position   ;
    var cmd_rx_offset_bit: logic     <4>;

    always_ff (clk, up_reset) {
        if_reset {
            cmd_rx_cmd        = 'x;
            cmd_rx_time       = 'x;
            cmd_rx_time_bit   = 'x;
            cmd_rx_offset     = 'x;
            cmd_rx_offset_pos = 'x;
            cmd_rx_offset_bit = 'x;
        } else {
            cmd_rx_offset_pos = (9 + 4 * (cmd_rx_node as int - 1) - 1) as t_position;

            if s_cmd_valid {
                cmd_rx_time_bit   <<= 1;
                cmd_rx_offset_bit <<= 1;

                // command
                if s_cmd_first {
                    cmd_rx_cmd      = s_cmd_data;
                    cmd_rx_time_bit = 8'b00000001;
                }

                // time
                for i: int in 0..8 {
                    if cmd_rx_time_bit[i] {
                        cmd_rx_time[i] = s_cmd_data;
                    }
                }

                // offset
                if s_cmd_pos == cmd_rx_offset_pos {
                    cmd_rx_offset_bit = 4'b0001;
                }
                for i: int in 0..4 {
                    if cmd_rx_offset_bit[i] {
                        cmd_rx_offset[i] = s_cmd_data;
                    }
                }
            }
        }
    }

    assign m_cmd_data  = 'x;
    assign m_cmd_valid = 1'b0;


    // ---------------------------------
    //  Downstream (send response)
    // ---------------------------------

    var down_reset: logic;
    assign down_reset = reset || res_rx_error;

    var res_pos: int;

    always_ff (clk, up_reset) {
        if_reset {
            res_pos     = 'x;
            m_res_data  = 'x;
            m_res_valid = 1'b0;
        } else {
            res_pos     = 9 + (cmd_rx_node as int - 1) * 4;
            m_res_data  = 'x;
            m_res_valid = 1'b0;
            if s_res_valid {
                for i: int in 0..4 {
                    if s_res_pos as int == res_pos + i {
                        m_res_data  = elapsed_time[i];
                        m_res_valid = 1'b1;
                    }
                }
            }
        }
    }

    always_ff (clk, up_reset) {
        if_reset {
            correct_override = 1'bx;
            correct_time     = 'x;
            correct_valid    = 1'b0;
        } else {
            correct_override = 1'bx;
            correct_time     = cmd_rx_time + cmd_rx_offset as t_time;
            correct_valid    = 1'b0;

            if cmd_rx_end {
                correct_override = cmd_rx_cmd[1];
                correct_valid    = cmd_rx_cmd[0];
            }
        }
    }

    if DEBUG : dbg_monitor  {
        #[sv("mark_debug=\"true\"")]    var dbg_cmd_rx_start: logic;
        #[sv("mark_debug=\"true\"")]    var dbg_res_rx_start: logic;
        #[sv("mark_debug=\"true\"")]    var dbg_start_time  : logic<32>;
        #[sv("mark_debug=\"true\"")]    var dbg_elapsed_time: logic<32>;

        always_ff(clk) {
            dbg_cmd_rx_start = cmd_rx_start;
            dbg_res_rx_start = res_rx_start    ;
            dbg_start_time   = start_time  ;
            dbg_elapsed_time = elapsed_time;
        }
    }


    // monitor (debug)
    if SIMULATION :sim_monitor {
        localparam t_monitor_time      : type           = logic<32>;
        var monitor_cmd_rx_start: t_monitor_time;
        var monitor_cmd_rx_end  : t_monitor_time;
        var monitor_res_rx_start: t_monitor_time;
        var monitor_res_rx_end  : t_monitor_time;
        always_ff (clk) {
            if cmd_rx_start {
                monitor_cmd_rx_start = current_time as t_monitor_time;
            }
            if cmd_rx_end {
                monitor_cmd_rx_end = current_time as t_monitor_time;
            }
            if res_rx_start {
                monitor_res_rx_start = current_time as t_monitor_time;
            }
            if res_rx_end {
                monitor_res_rx_end = current_time as t_monitor_time;
            }
        }
    }
}