module etherneco_packet_tx #(
    parameter FIFO_PTR_WIDTH: u32 = 0,
) (
    reset: input logic,
    clk  : input logic,

    start : input logic,
    cancel: input logic,

    param_length: input logic<16>, // 転送サイズより1小さい値を指定(AXI方式)
    param_type  : input logic<8> ,
    param_node  : input logic<8> ,

    tx_start: output logic,

    s_payload_last : input  logic   ,
    s_payload_data : input  logic<8>,
    s_payload_valid: input  logic   ,
    s_payload_ready: output logic   ,

    m_tx_first: output logic   ,
    m_tx_last : output logic   ,
    m_tx_data : output logic<8>,
    m_tx_valid: output logic   ,
    m_tx_ready: input  logic   ,
) {


    // -------------------------
    //  FIFO
    // -------------------------

    var fifo_free_count: logic<FIFO_PTR_WIDTH + 1>;
    var fifo_data_count: logic<FIFO_PTR_WIDTH + 1>;
    var fifo_last      : logic                    ;
    var fifo_data      : logic<8>                 ;
    var fifo_valid     : logic                    ;
    var fifo_ready     : logic                    ;

    inst u_fifo_fwtf: jelly2_fifo_fwtf #(
        DATA_WIDTH: 1 + 8         ,
        PTR_WIDTH : FIFO_PTR_WIDTH,
        DOUT_REGS : 0             ,
        RAM_TYPE  : "distributed" ,
        LOW_DEALY : 1             ,
        S_REGS    : 0             ,
        M_REGS    : 0             ,
    ) (
        reset       : reset                          ,
        clk         : clk                            ,
        cke         : 1'b1                           ,
        s_data      : {s_payload_last, s_payload_data},
        s_valid     : s_payload_valid                ,
        s_ready     : s_payload_ready                ,
        s_free_count: fifo_free_count                ,
        m_data      : {fifo_last, fifo_data}          ,
        m_valid     : fifo_valid                     ,
        m_ready     : fifo_ready                     ,
        m_data_count: fifo_data_count                ,
    );


    // -------------------------
    //  core
    // -------------------------

    enum STATE: logic<8> {
        IDLE = 8'b00000000,
        PREAMBLE = 8'b00000001,
        LENGTH = 8'b00000010,
        TYPE = 8'b00000100,
        NODE = 8'b00001000,
        PAYLOAD = 8'b00010000,
        PADDING = 8'b00100000,
        FCS = 8'b01000000,
        ERROR = 8'b10000000,
    }

    localparam t_length: type = logic<16>;
    localparam t_count : type = logic<3>;

    var cke: logic;
    assign cke = !m_tx_valid || m_tx_ready;


    // ----------------------------
    //  stage 0
    // ----------------------------

    var st0_state : STATE   ;
    var st0_count : t_count ;
    var st0_length: t_length;
    var st0_first : logic   ;
    var st0_last  : logic   ;

    var st0_count_next: t_count;
    assign st0_count_next = st0_count + 1'b1;

    var st0_length_next: t_length;
    assign st0_length_next = st0_length - 1'b1;

    always_ff (clk, reset) {
        if_reset {
            st0_state  = STATE::IDLE;
            st0_count  = 'x;
            st0_length = 'x;
            st0_first  = 1'bx;
            st0_last   = 1'bx;

        } else if cke {

            st0_count = st0_count_next;
            case st0_state {
                STATE::IDLE: {
                    st0_count  = 'x;
                    st0_length = 'x;
                    st0_first  = 1'bx;
                    st0_last   = 1'bx;
                    if tx_start {
                        st0_state  = STATE::PREAMBLE;
                        st0_count  = '0;
                        st0_length = param_length;
                        st0_first  = 1'b0;
                        st0_last   = 1'b0;
                    }
                }

                STATE::PREAMBLE: {
                    st0_first = 1'b0;
                    st0_last  = (st0_count == 3'd5);
                    if st0_last {
                        st0_state = STATE::LENGTH;
                        st0_count = '0;
                        st0_first = 1'b1;
                        st0_last  = 1'b0;
                    }
                }

                STATE::LENGTH: {
                    st0_first = 1'b0;
                    st0_last  = (st0_count[0] == 1'd0);
                    if st0_last {
                        st0_state = STATE::TYPE;
                        st0_count = '0;
                        st0_first = 1'b1;
                        st0_last  = 1'b1;
                    }
                }

                STATE::TYPE: {
                    st0_first = 1'b1;
                    st0_last  = 1'b1;
                    st0_state = STATE::NODE;
                    st0_count = '0;
                }

                STATE::NODE: {
                    st0_state = STATE::PAYLOAD;
                    st0_count = '0;
                    st0_first = 1'b1;
                    st0_last  = st0_length == 16'd0;
                }

                STATE::PAYLOAD: {
                    st0_length = st0_length_next;
                    st0_first  = 1'b0;
                    st0_last   = (st0_length_next == 0);
                    if fifo_last {
                        st0_state = STATE::PADDING;
                    }
                    if st0_last {
                        st0_state  = STATE::FCS;
                        st0_count  = '0;
                        st0_length = 'x;
                        st0_first  = 1'b1;
                        st0_last   = 1'b0;
                    }
                }

                STATE::PADDING: {
                    st0_length = st0_length_next;
                    st0_first  = 1'b0;
                    st0_last   = (st0_length_next == 0);
                    if st0_last {
                        st0_state  = STATE::FCS;
                        st0_count  = '0;
                        st0_length = 'x;
                        st0_first  = 1'b1;
                        st0_last   = 1'b0;
                    }
                }

                STATE::FCS: {
                    st0_length = 'x;
                    st0_first  = 1'b0;
                    st0_last   = st0_count == 3'd2;
                    if st0_last {
                        st0_state = STATE::IDLE;
                        st0_count = 'x;
                    }
                }

                default: {
                    st0_state  = STATE::IDLE;
                    st0_count  = 'x;
                    st0_length = 'x;
                    st0_first  = 1'bx;
                    st0_last   = 1'bx;
                }
            }

            // エラーチェック
            if (st0_state == STATE::PAYLOAD && !fifo_valid) // 転送中アンダーフロー
             || (st0_state == STATE::PAYLOAD && st0_last && !fifo_last) { // オーバーフロー
                st0_state  = STATE::ERROR;
                st0_count  = 'x;
                st0_length = 'x;
                st0_first  = 1'bx;
                st0_last   = 1'bx;
            }

            if cancel {
                st0_state  = STATE::IDLE;
                st0_count  = 'x;
                st0_length = 'x;
                st0_first  = 1'bx;
                st0_last   = 1'bx;
            }
        }
    }

    assign fifo_ready = cke && (st0_state == STATE::PAYLOAD);

    assign tx_start = start && (st0_state == STATE::IDLE);


    // ----------------------------
    //  stage 1
    // ----------------------------

    var st1_state: STATE   ;
    var st1_first: logic   ;
    var st1_last : logic   ;
    var st1_data : logic<8>;

    always_ff (clk, reset) {
        if_reset {
            st1_state = STATE::IDLE;
            st1_first = 'x;
            st1_last  = 'x;
            st1_data  = 'x;
        } else if cke {

            // stage1
            st1_state = st0_state;
            st1_first = st0_first;
            st1_last  = st0_last;
            st1_data  = 'x;

            case st0_state {
                STATE::IDLE: {
                    // ここだけ追い越しして1cycle稼ぐ
                    if tx_start {
                        st1_state = STATE::PREAMBLE;
                        st1_first = 1'b1;
                        st1_last  = 1'b0;
                        st1_data  = 8'h55;
                    }
                }

                STATE::PREAMBLE: {
                    st1_data = if st0_last {
                        8'hd5
                    } else {
                        8'h55
                    };
                }

                STATE::LENGTH: {
                    st1_data = if st0_count[0] {
                        st0_length[15:8]
                    } else {
                        st0_length[7:0]
                    };
                }

                STATE::TYPE: {
                    st1_data = param_type;
                }

                STATE::NODE: {
                    st1_data = param_node;
                }

                STATE::PAYLOAD: {
                    st1_data = fifo_data;
                }

                STATE::PADDING: {
                    st1_data = 8'h00;
                }

                STATE::FCS: {
                    st1_data = 'x;
                }

                default: {}
            }

            // キャンセル
            if cancel {
                st1_state = STATE::IDLE;
                st1_first = 1'bx;
                st1_last  = 1'bx;
                st1_data  = 'x;
            }
        }
    }


    // ----------------------------
    //  stage 2
    // ----------------------------

    var st2_state: STATE    ;
    var st2_first: logic    ;
    var st2_last : logic    ;
    var st2_crc  : logic<32>;
    var st2_data : logic<8> ;

    always_ff (clk, reset) {
        if_reset {
            st2_state = STATE::IDLE;
            st2_first = 1'bx;
            st2_last  = 1'bx;
            st2_data  = 'x;
        } else if cke {
            st2_state = st1_state;
            st2_first = st1_first;
            st2_last  = st1_last;
            st2_data  = st1_data;

            if cancel {
                st2_state = STATE::IDLE;
                st2_first = 1'bx;
                st2_last  = 1'bx;
                st2_data  = 'x;
            }
        }
    }

    // CRC
    var crc_update: logic    ;
    var crc_data  : logic<8> ;
    var crc_valid : logic    ;
    var crc_value : logic<32>;

    inst u_cacl_crc: jelly2_calc_crc #(
        DATA_WIDTH: 8           ,
        CRC_WIDTH : 32          ,
        POLY_REPS : 32'h04C11DB7,
        REVERSED  : 0           ,
    ) (
        reset: reset,
        clk  : clk  ,
        cke  : cke  ,

        in_update: crc_update,
        in_data  : crc_data  ,
        in_valid : crc_valid ,

        out_crc: crc_value,
    );

    assign crc_update = !(st1_state == STATE::LENGTH && st1_first);
    assign crc_data   = st1_data;
    assign crc_valid  = (st1_state == STATE::LENGTH || st1_state == STATE::TYPE || st1_state == STATE::NODE || st1_state == STATE::PAYLOAD || st1_state == STATE::PADDING);
    assign st2_crc    = crc_value;



    // ----------------------------
    //  stage 3
    // ----------------------------

    var st3_state: STATE    ;
    var st3_first: logic    ;
    var st3_last : logic    ;
    var st3_data : logic<32>;
    var st3_valid: logic    ;

    always_ff (clk, reset) {
        if_reset {
            st3_state = STATE::IDLE;
            st3_first = 1'bx;
            st3_last  = 1'bx;
            st3_data  = 'x;
            st3_valid = 1'b0;

        } else if cke {
            st3_state = st2_state;
            st3_first = st2_first && st2_state == STATE::PREAMBLE;
            st3_last  = st2_last && st2_state == STATE::FCS;
            if st2_state == STATE::FCS {
                if st2_first {
                    st3_data = st2_crc;
                } else {
                    st3_data >>= 8;
                }
            } else {
                st3_data[7:0] = st2_data;
            }
            st3_valid = (st2_state != STATE::IDLE);

            if (cancel && st3_valid && !st3_last) || st2_state == STATE::ERROR {
                st3_state     = STATE::ERROR;
                st3_first     = 1'b0;
                st3_last      = 1'b1;
                st3_data[7:0] = 8'h00;
                st3_valid     = 1'b1;
            }
        }
    }

    assign m_tx_first = st3_first;
    assign m_tx_last  = st3_last;
    assign m_tx_data  = st3_data[7:0];
    assign m_tx_valid = st3_valid;

}
