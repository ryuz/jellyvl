module etherneco_synctimer_slave #(
    parameter TIMER_WIDTH          : u32     = 64                                   , // タイマのbit幅
    parameter NUMERATOR            : u32     = 10                                   , // クロック周期の分子
    parameter DENOMINATOR          : u32     = 3                                    , // クロック周期の分母
    parameter LIMIT_WIDTH          : u32     = TIMER_WIDTH                          , // 補正限界のbit幅
    parameter CALC_WIDTH           : u32     = 32                                   , // 補正に使う範囲のタイマ幅
    parameter CYCLE_WIDTH          : u32     = 32                                   , // 自クロックサイクルカウンタのbit数
    parameter ERROR_WIDTH          : u32     = 32                                   , // 誤差計算時のbit幅
    parameter ERROR_Q              : u32     = 8                                    , // 誤差計算時に追加する固定小数点数bit数
    parameter ADJUST_WIDTH         : u32     = CYCLE_WIDTH + ERROR_Q                , // 補正周期のbit幅
    parameter ADJUST_Q             : u32     = ERROR_Q                              , // 補正周期に追加する固定小数点数bit数
    parameter LPF_GAIN_CYCLE       : u32     = 6                                    , // 自クロックサイクルカウントLPFの更新ゲイン(1/2^N)
    parameter LPF_GAIN_PERIOD      : u32     = 6                                    , // 周期補正のLPFの更新ゲイン(1/2^N)
    parameter LPF_GAIN_PHASE       : u32     = 6                                    , // 位相補正のLPFの更新ゲイン(1/2^N)
    parameter WB_ADR_WIDTH         : u32     = 16                                   ,
    parameter WB_DAT_WIDTH         : u32     = 32                                   ,
    parameter WB_SEL_WIDTH         : u32     = WB_DAT_WIDTH / 8                     ,
    parameter t_adj_bit            : type    = logic<1>                             ,
    parameter t_adj_time           : type    = logic<CALC_WIDTH>                    ,
    parameter t_adj_value          : type    = signed logic<ADJUST_WIDTH + ADJUST_Q>,
    parameter t_error              : type    = signed logic<ERROR_WIDTH>            ,
    parameter t_limit              : type    = signed logic<LIMIT_WIDTH>            ,
    parameter t_time               : type    = logic<TIMER_WIDTH>                   ,
    parameter t_wb_adr             : type    = logic<WB_ADR_WIDTH>                  ,
    parameter t_wb_dat             : type    = logic<WB_DAT_WIDTH>                  ,
    parameter t_wb_sel             : type    = logic<WB_SEL_WIDTH>                  ,
    parameter INIT_PARAM_LIMIT_MIN : t_limit = -100000 as t_limit                     ,
    parameter INIT_PARAM_LIMIT_MAX : t_limit = +100000 as t_limit                     ,
    parameter INIT_PARAM_ADJUST_MIN: t_error = -1000 as t_error                       ,
    parameter INIT_PARAM_ADJUST_MAX: t_error = +1000 as t_error                       ,

    parameter DEBUG     : bit = 1'b0,
    parameter SIMULATION: bit = 1'b0,
) (
    reset: input logic,
    clk  : input logic,

    s_wb_adr_i: input  logic<WB_ADR_WIDTH>,
    s_wb_dat_o: output logic<WB_DAT_WIDTH>,
    s_wb_dat_i: input  logic<WB_DAT_WIDTH>,
    s_wb_sel_i: input  logic<WB_SEL_WIDTH>,
    s_wb_we_i : input  logic              ,
    s_wb_stb_i: input  logic              ,
    s_wb_ack_o: output logic              ,

    adj_enable: input logic,

    current_time: output logic<TIMER_WIDTH>,

    // command
    cmd_rx_start : input logic    ,
    cmd_rx_end   : input logic    ,
    cmd_rx_error : input logic    ,
    cmd_rx_length: input logic<16>,
    cmd_rx_type  : input logic<8> ,
    cmd_rx_node  : input logic<8> ,

    s_cmd_first: input  logic    ,
    s_cmd_last : input  logic    ,
    s_cmd_pos  : input  logic<16>,
    s_cmd_data : input  logic<8> ,
    s_cmd_valid: input  logic    ,
    m_cmd_data : output logic<8> ,
    m_cmd_valid: output logic    ,

    // downstream
    res_rx_start : input logic    ,
    res_rx_end   : input logic    ,
    res_rx_error : input logic    ,
    res_rx_length: input logic<16>,
    res_rx_type  : input logic<8> ,
    res_rx_node  : input logic<8> ,

    s_res_first: input  logic    ,
    s_res_last : input  logic    ,
    s_res_pos  : input  logic<16>,
    s_res_data : input  logic<8> ,
    s_res_valid: input  logic    ,
    m_res_data : output logic<8> ,
    m_res_valid: output logic    ,
) {

    function WriteMask (
        regs: input t_wb_dat,
        dat : input t_wb_dat,
        sel : input t_wb_sel,
    ) -> t_wb_dat {
        var result: t_wb_dat;
        for i: u32      in 0..WB_DAT_WIDTH {
            result[i] = if sel[i / 8] {
                dat[i]
            } else {
                regs[i]
            };
        }
        return result;
    }

    localparam ADR_CORE_ID         : t_wb_adr = 32'h00 as t_wb_adr;
    localparam ADR_RECV_VALID      : t_wb_adr = 32'h20 as t_wb_adr;
    localparam ADR_CORRECT_TIME    : t_wb_adr = 32'h21 as t_wb_adr;
    localparam ADR_LOCAL_TIME      : t_wb_adr = 32'h22 as t_wb_adr;
    localparam ADR_OVERRIDE_EN     : t_wb_adr = 32'h30 as t_wb_adr;
    localparam ADR_OVERRIDE_VALUE  : t_wb_adr = 32'h31 as t_wb_adr;
    localparam ADR_PARAM_LIMIT_MIN : t_wb_adr = 32'h40 as t_wb_adr;
    localparam ADR_PARAM_LIMIT_MAX : t_wb_adr = 32'h41 as t_wb_adr;
    localparam ADR_PARAM_ADJUST_MIN: t_wb_adr = 32'h42 as t_wb_adr;
    localparam ADR_PARAM_ADJUST_MAX: t_wb_adr = 32'h43 as t_wb_adr;

    var reg_recv_valid      : t_adj_bit  ;
    var reg_override_en     : t_adj_bit  ;
    var reg_override_value  : t_adj_value;
    var reg_param_limit_min : t_limit    ;
    var reg_param_limit_max : t_limit    ;
    var reg_param_adjust_min: t_error    ;
    var reg_param_adjust_max: t_error    ;

    var monitor_correct_time : t_time;
    var monitor_correct_renew: logic ;
    var monitor_correct_valid: logic ;

    always_ff (clk, reset) {
        if_reset {
            reg_recv_valid     = '0;
            reg_override_en    = '0;
            reg_override_value = '0;
        } else {
            if s_wb_stb_i && s_wb_we_i {
                case s_wb_adr_i {
                    ADR_RECV_VALID    : reg_recv_valid     = WriteMask(reg_recv_valid as t_wb_dat, s_wb_dat_i, s_wb_sel_i) as t_adj_bit;
                    ADR_OVERRIDE_EN   : reg_override_en    = WriteMask(reg_override_en as t_wb_dat, s_wb_dat_i, s_wb_sel_i) as t_adj_bit;
                    ADR_OVERRIDE_VALUE: reg_override_value = WriteMask(reg_override_value as t_wb_dat, s_wb_dat_i, s_wb_sel_i) as t_adj_value;
                    default           : {}
                }
            }
        }
    }

    always_comb {
        s_wb_dat_o = '0;
        case s_wb_adr_i {
            ADR_CORE_ID       : s_wb_dat_o = 32'hffff1122 as t_wb_dat;
            ADR_RECV_VALID    : s_wb_dat_o = reg_recv_valid as t_wb_dat;
            ADR_CORRECT_TIME  : s_wb_dat_o = 0 as t_wb_dat;
            ADR_LOCAL_TIME    : s_wb_dat_o = 0 as t_wb_dat;
            ADR_OVERRIDE_EN   : s_wb_dat_o = reg_override_en as t_wb_dat;
            ADR_OVERRIDE_VALUE: s_wb_dat_o = reg_override_value as t_wb_dat;
            default           : {}
        }
    }

    assign s_wb_ack_o = s_wb_stb_i;


    // core
    inst u_etherneco_synctimer_slave_core: etherneco_synctimer_slave_core #(
        WB_ADR_WIDTH   : WB_ADR_WIDTH   ,
        WB_DAT_WIDTH   : WB_DAT_WIDTH   ,
        WB_SEL_WIDTH   : WB_SEL_WIDTH   ,
        TIMER_WIDTH    : TIMER_WIDTH    ,
        NUMERATOR      : NUMERATOR      ,
        DENOMINATOR    : DENOMINATOR    ,
        LIMIT_WIDTH    : LIMIT_WIDTH    ,
        CALC_WIDTH     : CALC_WIDTH     ,
        CYCLE_WIDTH    : CYCLE_WIDTH    ,
        ERROR_WIDTH    : ERROR_WIDTH    ,
        ERROR_Q        : ERROR_Q        ,
        ADJUST_WIDTH   : ADJUST_WIDTH   ,
        ADJUST_Q       : ADJUST_Q       ,
        LPF_GAIN_CYCLE : LPF_GAIN_CYCLE ,
        LPF_GAIN_PERIOD: LPF_GAIN_PERIOD,
        LPF_GAIN_PHASE : LPF_GAIN_PHASE ,
        DEBUG          : DEBUG          ,
        SIMULATION     : SIMULATION     ,
    ) (
        reset: reset,
        clk  : clk  ,

        adj_enable  : adj_enable  ,
        current_time: current_time,

        param_limit_min : reg_param_limit_min ,
        param_limit_max : reg_param_limit_max ,
        param_adjust_min: reg_param_adjust_min,
        param_adjust_max: reg_param_adjust_max,

        monitor_correct_time : monitor_correct_time ,
        monitor_correct_renew: monitor_correct_renew,
        monitor_correct_valid: monitor_correct_valid,

        cmd_rx_start : cmd_rx_start ,
        cmd_rx_end   : cmd_rx_end   ,
        cmd_rx_error : cmd_rx_error ,
        cmd_rx_length: cmd_rx_length,
        cmd_rx_type  : cmd_rx_type  ,
        cmd_rx_node  : cmd_rx_node  ,

        s_cmd_first: s_cmd_first,
        s_cmd_last : s_cmd_last ,
        s_cmd_pos  : s_cmd_pos  ,
        s_cmd_data : s_cmd_data ,
        s_cmd_valid: s_cmd_valid,
        m_cmd_data : m_cmd_data ,
        m_cmd_valid: m_cmd_valid,

        res_rx_start : res_rx_start ,
        res_rx_end   : res_rx_end   ,
        res_rx_error : res_rx_error ,
        res_rx_length: res_rx_length,
        res_rx_type  : res_rx_type  ,
        res_rx_node  : res_rx_node  ,

        s_res_first: s_res_first,
        s_res_last : s_res_last ,
        s_res_pos  : s_res_pos  ,
        s_res_data : s_res_data ,
        s_res_valid: s_res_valid,
        m_res_data : m_res_data ,
        m_res_valid: m_res_valid,
    );
}
