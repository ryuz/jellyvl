module etherneco_slave #(
    param TIMER_WIDTH            : u32 = 64                                   , // タイマのbit幅
    param NUMERATOR              : u32 = 8                                    , // クロック周期の分子
    param DENOMINATOR            : u32 = 1                                    , // クロック周期の分母
    param SYNCTIM_LIMIT_WIDTH    : u32 = TIMER_WIDTH                          , // 補正限界のbit幅
    param SYNCTIM_TIMER_WIDTH    : u32 = 32                                   , // 補正に使う範囲のタイマ幅
    param SYNCTIM_CYCLE_WIDTH    : u32 = 32                                   , // 自クロックサイクルカウンタのbit数
    param SYNCTIM_ERROR_WIDTH    : u32 = 32                                   , // 誤差計算時のbit幅
    param SYNCTIM_ERROR_Q        : u32 = 8                                    , // 誤差計算時に追加する固定小数点数bit数
    param SYNCTIM_ADJUST_WIDTH   : u32 = SYNCTIM_CYCLE_WIDTH + SYNCTIM_ERROR_Q, // 補正周期のbit幅
    param SYNCTIM_ADJUST_Q       : u32 = SYNCTIM_ERROR_Q                      , // 補正周期に追加する固定小数点数bit数
    param SYNCTIM_LPF_GAIN_CYCLE : u32 = 6                                    , // 自クロックサイクルカウントLPFの更新ゲイン(1/2^N)
    param SYNCTIM_LPF_GAIN_PERIOD: u32 = 6                                    , // 周期補正のLPFの更新ゲイン(1/2^N)
    param SYNCTIM_LPF_GAIN_PHASE : u32 = 6                                    , // 位相補正のLPFの更新ゲイン(1/2^N)
    param DEBUG                  : bit = 1'b0                                 ,
    param SIMULATION             : bit = 1'b0                                 ,
) (
    reset: input logic,
    clk  : input logic,

    current_time: output logic<TIMER_WIDTH>,

    timsync_adj_enable: input logic,

    s_up_rx_first: input  logic   ,
    s_up_rx_last : input  logic   ,
    s_up_rx_data : input  logic<8>,
    s_up_rx_valid: input  logic   ,
    m_up_tx_first: output logic   ,
    m_up_tx_last : output logic   ,
    m_up_tx_data : output logic<8>,
    m_up_tx_valid: output logic   ,
    m_up_tx_ready: input  logic   ,

    s_down_rx_first: input  logic   ,
    s_down_rx_last : input  logic   ,
    s_down_rx_data : input  logic<8>,
    s_down_rx_valid: input  logic   ,
    m_down_tx_first: output logic   ,
    m_down_tx_last : output logic   ,
    m_down_tx_data : output logic<8>,
    m_down_tx_valid: output logic   ,
    m_down_tx_ready: input  logic   ,
) {


    // ---------------------------------
    //  Ring bus
    // ---------------------------------

    // Outer loop
    var outer_rx_start : logic    ;
    var outer_rx_end   : logic    ;
    var outer_rx_error : logic    ;
    var outer_rx_length: logic<16>;
    var outer_rx_type  : logic<8> ;
    var outer_rx_node  : logic<8> ;

    var outer_payload_first: logic    ;
    var outer_payload_last : logic    ;
    var outer_payload_pos  : logic<16>;
    var outer_payload_data : logic<8> ;
    var outer_payload_valid: logic    ;
    var outer_replace_data : logic<8> ;
    var outer_replace_valid: logic    ;

    inst u_etherneco_packet_rx_outer: etherneco_packet_rx #(
        DOWN_STREAM  : 1'b0,
        REPLACE_DELAY: 0   ,
    ) (
        reset: reset,
        clk  : clk  ,

        s_rx_first: s_up_rx_first,
        s_rx_last : s_up_rx_last ,
        s_rx_data : s_up_rx_data ,
        s_rx_valid: s_up_rx_valid,

        m_tx_first: m_down_tx_first,
        m_tx_last : m_down_tx_last ,
        m_tx_data : m_down_tx_data ,
        m_tx_valid: m_down_tx_valid,

        rx_start : outer_rx_start ,
        rx_end   : outer_rx_end   ,
        rx_error : outer_rx_error ,
        rx_length: outer_rx_length,
        rx_type  : outer_rx_type  ,
        rx_node  : outer_rx_node  ,

        payload_first: outer_payload_first,
        payload_last : outer_payload_last ,
        payload_pos  : outer_payload_pos  ,
        payload_data : outer_payload_data ,
        payload_valid: outer_payload_valid,
        replace_data : outer_replace_data ,
        replace_valid: outer_replace_valid,
    );


    // Inner loop
    var inner_rx_start : logic    ;
    var inner_rx_end   : logic    ;
    var inner_rx_error : logic    ;
    var inner_rx_length: logic<16>;
    var inner_rx_type  : logic<8> ;
    var inner_rx_node  : logic<8> ;

    var inner_payload_first: logic    ;
    var inner_payload_last : logic    ;
    var inner_payload_pos  : logic<16>;
    var inner_payload_data : logic<8> ;
    var inner_payload_valid: logic    ;
    var inner_replace_data : logic<8> ;
    var inner_replace_valid: logic    ;

    inst u_etherneco_packet_rx_inner: etherneco_packet_rx #(
        DOWN_STREAM  : 1'b1,
        REPLACE_DELAY: 0   ,
    ) (
        reset: reset,
        clk  : clk  ,

        s_rx_first: s_down_rx_first,
        s_rx_last : s_down_rx_last ,
        s_rx_data : s_down_rx_data ,
        s_rx_valid: s_down_rx_valid,

        m_tx_first: m_up_tx_first,
        m_tx_last : m_up_tx_last ,
        m_tx_data : m_up_tx_data ,
        m_tx_valid: m_up_tx_valid,

        rx_start : inner_rx_start ,
        rx_end   : inner_rx_end   ,
        rx_error : inner_rx_error ,
        rx_length: inner_rx_length,
        rx_type  : inner_rx_type  ,
        rx_node  : inner_rx_node  ,

        payload_first: inner_payload_first,
        payload_last : inner_payload_last ,
        payload_pos  : inner_payload_pos  ,
        payload_data : inner_payload_data ,
        payload_valid: inner_payload_valid,
        replace_data : inner_replace_data ,
        replace_valid: inner_replace_valid,
    );



    // -------------------------------------
    // Functions
    // -------------------------------------

    var tmp_monitor_correct_time : logic<TIMER_WIDTH>;
    var tmp_monitor_correct_renew: logic             ;
    var tmp_monitor_correct_valid: logic             ;

    inst u_etherneco_synctimer_slave: etherneco_synctimer_slave_core #(
        TIMER_WIDTH    : TIMER_WIDTH            ,
        NUMERATOR      : NUMERATOR              ,
        DENOMINATOR    : DENOMINATOR            ,
        LIMIT_WIDTH    : SYNCTIM_LIMIT_WIDTH    ,
        CALC_WIDTH     : SYNCTIM_TIMER_WIDTH    ,
        CYCLE_WIDTH    : SYNCTIM_CYCLE_WIDTH    ,
        ERROR_WIDTH    : SYNCTIM_ERROR_WIDTH    ,
        ERROR_Q        : SYNCTIM_ERROR_Q        ,
        ADJUST_WIDTH   : SYNCTIM_ADJUST_WIDTH   ,
        ADJUST_Q       : SYNCTIM_ADJUST_Q       ,
        LPF_GAIN_CYCLE : SYNCTIM_LPF_GAIN_CYCLE ,
        LPF_GAIN_PERIOD: SYNCTIM_LPF_GAIN_PERIOD,
        LPF_GAIN_PHASE : SYNCTIM_LPF_GAIN_PHASE ,
        DEBUG          : DEBUG                  ,
        SIMULATION     : SIMULATION             ,
    ) (
        reset: reset,
        clk  : clk  ,

        adj_enable  : timsync_adj_enable,
        current_time: current_time      ,

        param_limit_min : -32'd100000,
        param_limit_max : +32'd100000,
        param_adjust_min: -24'd10000 ,
        param_adjust_max: +24'd10000 ,

        monitor_correct_time : tmp_monitor_correct_time ,
        monitor_correct_renew: tmp_monitor_correct_renew,
        monitor_correct_valid: tmp_monitor_correct_valid,

        cmd_rx_start : outer_rx_start     ,
        cmd_rx_end   : outer_rx_end       ,
        cmd_rx_error : outer_rx_error     ,
        cmd_rx_length: outer_rx_length    ,
        cmd_rx_type  : outer_rx_type      ,
        cmd_rx_node  : outer_rx_node      ,
        s_cmd_first  : outer_payload_first,
        s_cmd_last   : outer_payload_last ,
        s_cmd_pos    : outer_payload_pos  ,
        s_cmd_data   : outer_payload_data ,
        s_cmd_valid  : outer_payload_valid,
        m_cmd_data   : outer_replace_data ,
        m_cmd_valid  : outer_replace_valid,

        res_rx_start : inner_rx_start     ,
        res_rx_end   : inner_rx_end       ,
        res_rx_error : inner_rx_error     ,
        res_rx_length: inner_rx_length    ,
        res_rx_type  : inner_rx_type      ,
        res_rx_node  : inner_rx_node      ,
        s_res_first  : inner_payload_first,
        s_res_last   : inner_payload_last ,
        s_res_pos    : inner_payload_pos  ,
        s_res_data   : inner_payload_data ,
        s_res_valid  : inner_payload_valid,
        m_res_data   : inner_replace_data ,
        m_res_valid  : inner_replace_valid,
    );

}
