

// insert FF to stream pipelines
module stream_ff #(
    param t_data   : type   = logic<8>,
    param S_REGS   : bit    = 1       ,
    param M_REGS   : bit    = 1       ,
    param INIT_DATA: t_data = 'x      ,
) (
    reset: input logic,
    clk  : input logic,
    cke  : input logic,

    s_data : input  t_data,
    s_valid: input  logic ,
    s_ready: output logic ,

    m_data : output t_data,
    m_valid: output logic ,
    m_ready: input  logic ,
) {

    // internal signal
    var internal_data : t_data;
    var internal_valid: logic ;
    var internal_ready: logic ;

    // slave port
    if S_REGS :s_regs {
        var reg_s_ready   : logic ;
        var next_s_ready  : logic ;
        var reg_buf_data  : t_data;
        var next_buf_data : t_data;
        var reg_buf_valid : logic ;
        var next_buf_valid: logic ;

        always_comb {
            next_s_ready   = reg_s_ready;
            next_buf_data  = reg_buf_data;
            next_buf_valid = reg_buf_valid;

            if !reg_buf_valid && s_valid && !internal_ready {
                // 次のステージに送れない状況でバッファリング
                next_s_ready   = 1'b0;
                next_buf_data  = s_data;
                next_buf_valid = 1'b1;
            } else {
                if internal_ready {
                    next_buf_valid = 1'b0;
                }
                if !internal_valid || internal_ready {
                    next_s_ready = 1'b1;
                }
            }
        }

        always_ff (clk, reset) {
            if_reset {
                reg_s_ready   = 1'b0;
                reg_buf_valid = 1'b0;
                reg_buf_data  = INIT_DATA;
            } else if cke {
                reg_s_ready   = next_s_ready;
                reg_buf_data  = next_buf_data;
                reg_buf_valid = next_buf_valid;
            }
        }
        assign internal_data = if reg_buf_valid {
            reg_buf_data
        } else {
            s_data
        };
        assign internal_valid = if reg_buf_valid {
            1'b1
        } else {
            s_valid & reg_s_ready
        };
        assign s_ready = reg_s_ready;
    } else :s_bypass {
        assign internal_data  = s_data;
        assign internal_valid = s_valid;
        assign s_ready        = internal_ready;
    }


    // master port
    if M_REGS :m_regs {
        var reg_m_data : t_data;
        var reg_m_valid: logic ;

        always_ff (clk, reset) {
            if_reset {
                reg_m_data  = INIT_DATA;
                reg_m_valid = 1'b0;
            } else if cke {
                if ~m_valid || m_ready {
                    reg_m_data  = internal_data;
                    reg_m_valid = internal_valid;
                }
            }
        }

        assign internal_ready = (!m_valid || m_ready);
        assign m_data         = reg_m_data;
        assign m_valid        = reg_m_valid;
    } else :m_bypass {
        assign internal_ready = m_ready;
        assign m_data         = internal_data;
        assign m_valid        = internal_valid;
    }
}
